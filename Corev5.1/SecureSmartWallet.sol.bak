// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol";
import "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import "@account-abstraction/contracts/interfaces/IEntryPoint.sol";
import "./SecureSmartWalletCore.sol";
import "./SecureSmartWalletGuardian.sol";
import "./SecureSmartWalletOwnership.sol";
import "./SecureSmartWalletEmergency.sol";
import "./SecureSmartWalletSignatures.sol";
import "./SecureSmartWalletExecute.sol";

/*
* @title SecureSmartWallet - EIP-4337 Smart Wallet (v4.48.1 - Ultimate Edition)
* @author DFXC Indonesian Security Web3 Project - Dev DayuWidayadi
* @dev Main contract that combines all wallet functionality through inheritance
*/

contract SecureSmartWallet is 
    Initializable,
    UUPSUpgradeable,
    SecureSmartWalletCore,
    SecureSmartWalletGuardian,
    SecureSmartWalletEmergency, 
    SecureSmartWalletSignatures,
    SecureSmartWalletOwnership,
    SecureSmartWalletExecute,
    IERC1271Upgradeable
{
    string public constant NAME = "SecureSmartWallet";
    string public constant VERSION = "4.48.1";
    string public constant UPGRADE_VERSION = "1.0.0";

    event ETHReceived(address indexed sender, uint256 amount);
    event SignatureValidated(address indexed signer, bool isOwner, bool isGuardian);

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor(IEntryPoint _entryPoint) SecureSmartWalletBase(_entryPoint) {
        _disableInitializers();
    }

    function initialize(
        address[] calldata _owners,
        address[] calldata _guardians,
        uint256 _guardianThreshold
    ) external initializer {
        __UUPSUpgradeable_init();
        __SecureSmartWalletBase_init(_owners, _guardians, _guardianThreshold);
        __SecureSmartWalletEmergency_init();
        factory = msg.sender;
    }

    function isValidSignature(bytes32 hash, bytes memory signature) 
        external 
        view 
        override 
        returns (bytes4) 
    {
        if (_isLocked) return bytes4(0xffffffff);
        
        bool isValidOwnerSig = _validateSignature(hash, signature);
        bool isValidGuardianSig = _validateGuardianSignature(hash, signature);
        
        return (isValidOwnerSig || isValidGuardianSig)
            ? bytes4(0x1626ba7e)
            : bytes4(0xffffffff);
    }

    function _authorizeUpgrade(address newImplementation) 
        internal 
        override(UUPSUpgradeable, SecureSmartWalletBase)
        view
        onlyOwner
    {
        require(newImplementation != address(0), "Invalid implementation");
        require(newImplementation != address(this), "Cannot upgrade to self");
        
        string memory newVersion = SecureSmartWallet(payable(newImplementation)).UPGRADE_VERSION();
        require(
            keccak256(abi.encodePacked(UPGRADE_VERSION)) == 
            keccak256(abi.encodePacked(newVersion)),
            "Version mismatch"
        );
    }

    receive() external payable {
        emit ETHReceived(msg.sender, msg.value);
    }

    uint256[50] private __gap;
}

contract SecureSmartWalletFactory {
    IEntryPoint public immutable entryPoint;
    address public immutable walletImplementation;
    
    event WalletCreated(address indexed wallet, address[] owners, address[] guardians, uint256 guardianThreshold);

    constructor(IEntryPoint _entryPoint) {
        require(address(_entryPoint) != address(0), "Invalid EntryPoint");
        entryPoint = _entryPoint;
        walletImplementation = address(new SecureSmartWallet(_entryPoint));
    }
    
    function deployWallet(
        address[] calldata owners,
        address[] calldata guardians,
        uint256 guardianThreshold
    ) external returns (address walletAddress) {
        require(owners.length > 0, "No owners provided");
        require(guardians.length >= guardianThreshold, "Invalid guardian threshold");
        require(guardianThreshold > 0, "Threshold must be > 0");
        
        ERC1967Proxy proxy = new ERC1967Proxy(
            walletImplementation,
            abi.encodeWithSelector(
                SecureSmartWallet.initialize.selector,
                owners,
                guardians,
                guardianThreshold
            )
        );
        
        walletAddress = address(proxy);
        emit WalletCreated(walletAddress, owners, guardians, guardianThreshold);
    }
}



ParserError: Source "@account-abstraction/contracts/interfaces/PackedUserOperation.sol" not found: Deferred import
  --> @account-abstraction/contracts/interfaces/IEntryPoint.sol:12:1:
   |
12 | import "./PackedUserOperation.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@account-abstraction/contracts/interfaces/IStakeManager.sol" not found: Deferred import
  --> @account-abstraction/contracts/interfaces/IEntryPoint.sol:13:1:
   |
13 | import "./IStakeManager.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ParserError: Source "@account-abstraction/contracts/interfaces/IAggregator.sol" not found: Deferred import
  --> @account-abstraction/contracts/interfaces/IEntryPoint.sol:14:1:
   |
14 | import "./IAggregator.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@account-abstraction/contracts/interfaces/INonceManager.sol" not found: Deferred import
  --> @account-abstraction/contracts/interfaces/IEntryPoint.sol:15:1:
   |
15 | import "./INonceManager.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@account-abstraction/contracts/interfaces/ISenderCreator.sol" not found: Deferred import
  --> @account-abstraction/contracts/interfaces/IEntryPoint.sol:16:1:
   |
16 | import "./ISenderCreator.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@openzeppelin/contracts/interfaces/draft-IERC1822.sol" not found: Deferred import
 --> @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:6:1:
  |
6 | import {IERC1822Proxiable} from "@openzeppelin/contracts/interfaces/draft-IERC1822.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ParserError: Source "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol" not found: Deferred import
 --> @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:7:1:
  |
7 | import {ERC1967Utils} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ParserError: Source "@openzeppelin/contracts/proxy/Proxy.sol" not found: Deferred import
 --> @openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:6:1:
  |
6 | import {Proxy} from "../Proxy.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ParserError: Source "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol" not found: Deferred import
 --> @openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:7:1:
  |
7 | import {ERC1967Utils} from "./ERC1967Utils.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@openzeppelin/contracts/utils/Strings.sol" not found: Deferred import
 --> @openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:6:1:
  |
6 | import {Strings} from "../Strings.sol";
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@openzeppelin/contracts/utils/cryptography/EIP712.sol" not found: Deferred import
  --> Corev5.1/SecureSmartWalletCore.sol:22:1:
   |
22 | import "@openzeppelin/contracts/utils/cryptography/EIP712.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@openzeppelin/contracts/utils/cryptography/ECDSA.sol" not found: Deferred import
  --> Corev5.1/SecureSmartWalletCore.sol:23:1:
   |
23 | import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@account-abstraction/contracts/interfaces/UserOperation.sol" not found: Deferred import
  --> Corev5.1/SecureSmartWalletCore.sol:24:1:
   |
24 | import "@account-abstraction/contracts/interfaces/UserOperation.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ParserError: Source "@openzeppelin/contracts/utils/StorageSlot.sol" not found: Deferred import
  --> Corev5.1/SecureSmartWalletCore.sol:25:1:
   |
25 | import "@openzeppelin/contracts/utils/StorageSlot.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Source "@openzeppelin/contracts/interfaces/IERC20.sol" not found: Deferred import
  --> Corev5.1/SecureSmartWalletCore.sol:26:1:
   |
26 | import "@openzeppelin/contracts/interfaces/IERC20.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Expected ')' but got identifier
   --> Corev5.1/SecureSmartWalletEmergency.sol:136:33:
    |
136 |         if (token == address(0) revert InvalidTokenAddress();
    |                                 ^^^^^^



ParserError: Expected ',' but got ';'
   --> Corev5.1/SecureSmartWalletExecute.sol:125:10:
    |
125 |         );
    |          ^


ParserError: Source "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol" not found: Deferred import
  --> Corev5.1/SecureSmartWalletGuardian.sol:19:1:
   |
19 | import "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


ParserError: Expected ',' but got ';'
   --> Corev5.1/SecureSmartWalletSignatures.sol:157:102:
    |
157 |         return (sigFailed ? 1 : 0) | (uint256(validAfter) << 160 | (uint256(validUntil) << (160 + 48);
    |                                                                                                      ^
